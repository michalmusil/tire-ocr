// <auto-generated />
using System;
using AiPipeline.TireOcr.EvaluationTool.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AiPipeline.TireOcr.EvaluationTool.Infrastructure.Migrations
{
    [DbContext(typeof(EvaluationToolDbContext))]
    [Migration("20251005185443_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.DbMatch.DbMatchingResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("ManufacturerMatch")
                        .HasColumnType("text");

                    b.Property<string>("Matches")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("DbMatchingResults");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.EvaluationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedAccuracy")
                        .HasColumnType("numeric");

                    b.Property<int>("FullMatchParameterCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalDistance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DbMatchingType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OcrType")
                        .HasColumnType("integer");

                    b.Property<int>("PostprocessingType")
                        .HasColumnType("integer");

                    b.Property<int>("PreprocessingType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("EvaluationRuns");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.OcrResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BillingUnit")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetectedCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DetectedManufacturer")
                        .HasColumnType("text");

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<string>("EstimatedCostCurrency")
                        .HasColumnType("text");

                    b.Property<decimal?>("InputUnitCount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OutputUnitCount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("OcrResults");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PostprocessingResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("PostprocessingResults");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PreprocessingResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RunId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("PreprocessingResults");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunBatchAggregate.EvaluationRunBatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EvaluationRunBatches");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.DbMatch.DbMatchingResultEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", null)
                        .WithOne("DbMatchingResult")
                        .HasForeignKey("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.DbMatch.DbMatchingResultEntity", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.EvaluationEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", null)
                        .WithOne("Evaluation")
                        .HasForeignKey("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.EvaluationEntity", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "AspectRatioEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "ConstructionEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "DiameterEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.TireCodeValueObject", "ExpectedTireCode", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("AspectRatio")
                                .HasColumnType("numeric");

                            b1.Property<string>("Construction")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Diameter")
                                .HasColumnType("numeric");

                            b1.Property<int?>("LoadIndex")
                                .HasColumnType("integer");

                            b1.Property<int?>("LoadIndex2")
                                .HasColumnType("integer");

                            b1.Property<char?>("LoadRange")
                                .HasColumnType("character(1)");

                            b1.Property<string>("RawCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SpeedRating")
                                .HasColumnType("text");

                            b1.Property<string>("VehicleClass")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "LoadIndex2Evaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "LoadIndexEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "LoadRangeEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "SpeedRatingEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "VehicleClassEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.Evaluation.ParameterEvaluationValueObject", "WidthEvaluation", b1 =>
                        {
                            b1.Property<Guid>("EvaluationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Distance")
                                .HasColumnType("integer");

                            b1.Property<decimal>("EstimatedAccuracy")
                                .HasColumnType("numeric");

                            b1.HasKey("EvaluationEntityId");

                            b1.ToTable("Evaluations");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationEntityId");
                        });

                    b.Navigation("AspectRatioEvaluation");

                    b.Navigation("ConstructionEvaluation");

                    b.Navigation("DiameterEvaluation");

                    b.Navigation("ExpectedTireCode")
                        .IsRequired();

                    b.Navigation("LoadIndex2Evaluation");

                    b.Navigation("LoadIndexEvaluation");

                    b.Navigation("LoadRangeEvaluation");

                    b.Navigation("SpeedRatingEvaluation");

                    b.Navigation("VehicleClassEvaluation");

                    b.Navigation("WidthEvaluation");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunBatchAggregate.EvaluationRunBatchEntity", null)
                        .WithMany("_evaluationRuns")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.ImageValueObject", "InputImage", b1 =>
                        {
                            b1.Property<Guid>("EvaluationRunEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EvaluationRunEntityId");

                            b1.ToTable("EvaluationRuns");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationRunEntityId");
                        });

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.RunFailure.EvaluationRunFailureValueObject", "RunFailure", b1 =>
                        {
                            b1.Property<Guid>("EvaluationRunEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Code")
                                .HasColumnType("integer");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Reason")
                                .HasColumnType("integer");

                            b1.HasKey("EvaluationRunEntityId");

                            b1.ToTable("EvaluationRuns");

                            b1.WithOwner()
                                .HasForeignKey("EvaluationRunEntityId");
                        });

                    b.Navigation("InputImage")
                        .IsRequired();

                    b.Navigation("RunFailure");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.OcrResultEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", null)
                        .WithOne("OcrResult")
                        .HasForeignKey("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.OcrResultEntity", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PostprocessingResultEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", null)
                        .WithOne("PostprocessingResult")
                        .HasForeignKey("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PostprocessingResultEntity", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.TireCodeValueObject", "TireCode", b1 =>
                        {
                            b1.Property<Guid>("PostprocessingResultEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("AspectRatio")
                                .HasColumnType("numeric");

                            b1.Property<string>("Construction")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Diameter")
                                .HasColumnType("numeric");

                            b1.Property<int?>("LoadIndex")
                                .HasColumnType("integer");

                            b1.Property<int?>("LoadIndex2")
                                .HasColumnType("integer");

                            b1.Property<char?>("LoadRange")
                                .HasColumnType("character(1)");

                            b1.Property<string>("RawCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SpeedRating")
                                .HasColumnType("text");

                            b1.Property<string>("VehicleClass")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("numeric");

                            b1.HasKey("PostprocessingResultEntityId");

                            b1.ToTable("PostprocessingResults");

                            b1.WithOwner()
                                .HasForeignKey("PostprocessingResultEntityId");
                        });

                    b.Navigation("TireCode")
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PreprocessingResultEntity", b =>
                {
                    b.HasOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", null)
                        .WithOne("PreprocessingResult")
                        .HasForeignKey("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.PreprocessingResultEntity", "RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.ImageValueObject", "PreprocessingResult", b1 =>
                        {
                            b1.Property<Guid>("PreprocessingResultEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PreprocessingResultEntityId");

                            b1.ToTable("PreprocessingResults");

                            b1.WithOwner()
                                .HasForeignKey("PreprocessingResultEntityId");
                        });

                    b.Navigation("PreprocessingResult")
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunAggregate.EvaluationRunEntity", b =>
                {
                    b.Navigation("DbMatchingResult");

                    b.Navigation("Evaluation");

                    b.Navigation("OcrResult");

                    b.Navigation("PostprocessingResult");

                    b.Navigation("PreprocessingResult");
                });

            modelBuilder.Entity("AiPipeline.TireOcr.EvaluationTool.Domain.EvaluationRunBatchAggregate.EvaluationRunBatchEntity", b =>
                {
                    b.Navigation("_evaluationRuns");
                });
#pragma warning restore 612, 618
        }
    }
}
