// <auto-generated />
using System;
using AiPipeline.Orchestration.Runner.Infrastructure.Common.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AiPipeline.Orchestration.Runner.Infrastructure.Migrations
{
    [DbContext(typeof(OrchestrationRunnerDbContext))]
    [Migration("20250817154940_AddStepResultOrder")]
    partial class AddStepResultOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.NodeTypeAggregate.NodeProcedure", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InputSchema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OutputSchema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("NodeProcedure");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.NodeTypeAggregate.NodeType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NodeTypes");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InitialInput")
                        .HasColumnType("text");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineResults");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineStepResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeProcedureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("PipelineStepResult");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultBatchAggregate.PipelineResultBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PipelineResultBatches");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.ApiKey", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Key");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.NodeTypeAggregate.NodeProcedure", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.NodeTypeAggregate.NodeType", null)
                        .WithMany("_availableProcedures")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineResult", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.PipelineResultBatchAggregate.PipelineResultBatch", null)
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineStepResult", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineResult", null)
                        .WithMany("_stepResults")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultBatchAggregate.PipelineResultBatch", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.ApiKey", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", null)
                        .WithMany("_apiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.RefreshToken", b =>
                {
                    b.HasOne("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", null)
                        .WithMany("_refreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.NodeTypeAggregate.NodeType", b =>
                {
                    b.Navigation("_availableProcedures");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.PipelineResultAggregate.PipelineResult", b =>
                {
                    b.Navigation("_stepResults");
                });

            modelBuilder.Entity("AiPipeline.Orchestration.Runner.Domain.UserAggregate.User", b =>
                {
                    b.Navigation("_apiKeys");

                    b.Navigation("_refreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
